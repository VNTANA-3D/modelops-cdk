state:
  renders:
    width: "{{ rendersWidth }}"
    format: "{{ imageFormat }}"
    height: "{{ rendersHeight }}"
  generateTurntable: true
  generateGif: true
  turntable:
    frames: "{{ turntableFrames }}"
    framerate: "{{ framerate }}"
    width: "{{ turntableWidth }}"
    height: "{{ turntableHeight }}"
  generateRenders: true
  actionUuid: c3ab2ded-6827-449c-8c7e-89a36042012b
  bucket: dev-client-7f94ed09-45b7-479e-84ac-fce2f05278c4
  generationRequestUuid: 2fda387d-a151-4f61-99d5-b8a2b1463f1b
  blobId: 2fda387d-a151-4f61-99d5-b8a2b1463f1b.glb
  versionedProductUuid: 43685d0c-4ed8-4dbe-b857-43fe1d56b1cf
  turntableUpdateTopic: asset-generation-turntable
  turntableUpdateTypeId: com.vntana.asset.queue.message.asset.turntable.update.AssetTurntableUpdateActionMessage
  rendersUpdateTopic: asset-generation-renders
  rendersUpdateTypeId: com.vntana.asset.queue.message.asset.renders.update.AssetRenderUpdateActionMessage
  __kafka:
    brokers:
      - kafka.kafka.svc:9092
    clientId: model-ops-gateway
  viewerConfig: '{\"scene\":{\"environment\":{\"src\":\"https://storage.googleapis.com/static-dev-mul-reg-stn-unif-vntana-com/assets/environment_maps/Studio_A_dim.hdr\"},\"lights\":{\"lightRig\":[{\"type\":\"directional\",\"intensity\":1,\"color\":16777215,\"position\":[0,0,0],\"direction\":[0.37788859497245025,-0.6253020730046984,-0.6827865898549665]},{\"type\":\"directional\",\"intensity\":1,\"color\":16777215,\"position\":[0,0,0],\"direction\":[-0.544306629479127,-0.625302032486377,-0.5592205837355044]},{\"type\":\"directional\",\"intensity\":1,\"color\":16777215,\"position\":[0,0,0],\"direction\":[-0.024428939559004506,0.6049951951138368,0.7958542836482022]},{\"type\":\"directional\",\"intensity\":1,\"color\":16777215,\"position\":[0,0,0],\"direction\":[0,1,0]}],\"lightRigOverrideColor\":16777215}},\"styling\":{\"background\":\"#ffffff\"}}'
  rendersWidth: 1080
  rendersHeight: 1920
  imageFormat: png
  background: "null"
  turntableWidth: 1152
  turntableHeight: 2048
  turntableFrames: 120
  framerate: 30
  turntableBackground: '""'
  generationRequestMetaUuid: 2fda387d-a151-4f61-99d5-b8a2b1463f1b
  originProductUuid: f9976fa2-2fbc-4735-9778-cf97e561e864
tasks:
  - name: Download asset from Cloud Storage
    module: CloudStorage
    props:
      bucket: "{{ bucket }}"
      src: model-{{ blobId }}
      action: download
      dest: /home/workspace/model-{{ generationRequestUuid }}.glb
    register: download
  - name: Generate standard renders
    module: ScreenshotGenerator
    props:
      args:
        - --verbose
        - --width
        - "{{ renders.width }}"
        - --height
        - "{{ renders.height }}"
        - --viewer-config
        - "{{ viewerConfig }}"
        - --background
        - "{{ background }}"
        - --camera-angles front
        - --camera-angles back
        - --camera-angles left
        - --camera-angles right
        - --camera-angles top
        - --camera-angles bottom
      src: "{{ download.dest }}"
      dest: /home/workspace/render.{{ imageFormat }}
      timeout: 600000
    callbacks:
      onStart:
        - module: Kafka
          props:
            topic: "{{ rendersUpdateTopic }}"
            typeId: "{{ rendersUpdateTypeId }}"
            message:
              actionUuid: "{{ actionUuid }}"
              generationRequestUuid: "{{ generationRequestUuid }}"
              actionType: GENERATE_RENDERS
              meta:
                versionedProductUuid: "{{ versionedProductUuid }}"
                originProductUuid: "{{ originProductUuid }}"
                generationRequestMetaUuid: "{{ generationRequestMetaUuid }}"
              status: ACTION_RUNNING
            key: "{{ actionUuid }}"
      onError:
        - module: StdOut
          props:
            format: raw
        - module: Kafka
          props:
            topic: "{{ rendersUpdateTopic }}"
            typeId: "{{ rendersUpdateTypeId }}"
            message:
              actionUuid: "{{ actionUuid }}"
              generationRequestUuid: "{{ generationRequestUuid }}"
              actionType: GENERATE_RENDERS
              meta:
                versionedProductUuid: "{{ versionedProductUuid }}"
                originProductUuid: "{{ originProductUuid }}"
                generationRequestMetaUuid: "{{ generationRequestMetaUuid }}"
              status: ACTION_FAILED
            key: "{{ actionUuid }}"
    register: renders
    when: generateRenders == true
  - name: Upload render 0
    module: CloudStorage
    props:
      bucket: "{{ bucket }}"
      src: /home/workspace/render_0.{{ imageFormat }}
      options:
        public: false
        autoCreate: true
      action: upload
      dest: render-0-{{ generationRequestUuid }}.{{ imageFormat }}
    callbacks:
      onError:
        - module: Kafka
          props:
            topic: "{{ rendersUpdateTopic }}"
            typeId: "{{ rendersUpdateTypeId }}"
            message:
              actionUuid: "{{ actionUuid }}"
              generationRequestUuid: "{{ generationRequestUuid }}"
              actionType: GENERATE_RENDERS
              meta:
                versionedProductUuid: "{{ versionedProductUuid }}"
                originProductUuid: "{{ originProductUuid }}"
                generationRequestMetaUuid: "{{ generationRequestMetaUuid }}"
              status: ACTION_FAILED
            key: "{{ actionUuid }}"
    when: generateRenders == true
  - name: Upload render 1
    module: CloudStorage
    props:
      bucket: "{{ bucket }}"
      src: /home/workspace/render_1.{{ imageFormat }}
      options:
        public: false
        autoCreate: true
      action: upload
      dest: render-1-{{ generationRequestUuid }}.{{ imageFormat }}
    callbacks:
      onError:
        - module: Kafka
          props:
            topic: "{{ rendersUpdateTopic }}"
            typeId: "{{ rendersUpdateTypeId }}"
            message:
              actionUuid: "{{ actionUuid }}"
              generationRequestUuid: "{{ generationRequestUuid }}"
              actionType: GENERATE_RENDERS
              meta:
                versionedProductUuid: "{{ versionedProductUuid }}"
                originProductUuid: "{{ originProductUuid }}"
                generationRequestMetaUuid: "{{ generationRequestMetaUuid }}"
              status: ACTION_FAILED
            key: "{{ actionUuid }}"
    when: generateRenders == true
  - name: Upload render 2
    module: CloudStorage
    props:
      bucket: "{{ bucket }}"
      src: /home/workspace/render_2.{{ imageFormat }}
      options:
        public: false
        autoCreate: true
      action: upload
      dest: render-2-{{ generationRequestUuid }}.{{ imageFormat }}
    callbacks:
      onError:
        - module: Kafka
          props:
            topic: "{{ rendersUpdateTopic }}"
            typeId: "{{ rendersUpdateTypeId }}"
            message:
              actionUuid: "{{ actionUuid }}"
              generationRequestUuid: "{{ generationRequestUuid }}"
              actionType: GENERATE_RENDERS
              meta:
                versionedProductUuid: "{{ versionedProductUuid }}"
                originProductUuid: "{{ originProductUuid }}"
                generationRequestMetaUuid: "{{ generationRequestMetaUuid }}"
              status: ACTION_FAILED
            key: "{{ actionUuid }}"
    when: generateRenders == true
  - name: Upload render 3
    module: CloudStorage
    props:
      bucket: "{{ bucket }}"
      src: /home/workspace/render_3.{{ imageFormat }}
      options:
        public: false
        autoCreate: true
      action: upload
      dest: render-3-{{ generationRequestUuid }}.{{ imageFormat }}
    callbacks:
      onError:
        - module: Kafka
          props:
            topic: "{{ rendersUpdateTopic }}"
            typeId: "{{ rendersUpdateTypeId }}"
            message:
              actionUuid: "{{ actionUuid }}"
              generationRequestUuid: "{{ generationRequestUuid }}"
              actionType: GENERATE_RENDERS
              meta:
                versionedProductUuid: "{{ versionedProductUuid }}"
                originProductUuid: "{{ originProductUuid }}"
                generationRequestMetaUuid: "{{ generationRequestMetaUuid }}"
              status: ACTION_FAILED
            key: "{{ actionUuid }}"
    when: generateRenders == true
  - name: Upload render 4
    module: CloudStorage
    props:
      bucket: "{{ bucket }}"
      src: /home/workspace/render_4.{{ imageFormat }}
      options:
        public: false
        autoCreate: true
      action: upload
      dest: render-4-{{ generationRequestUuid }}.{{ imageFormat }}
    callbacks:
      onError:
        - module: Kafka
          props:
            topic: "{{ rendersUpdateTopic }}"
            typeId: "{{ rendersUpdateTypeId }}"
            message:
              actionUuid: "{{ actionUuid }}"
              generationRequestUuid: "{{ generationRequestUuid }}"
              actionType: GENERATE_RENDERS
              meta:
                versionedProductUuid: "{{ versionedProductUuid }}"
                originProductUuid: "{{ originProductUuid }}"
                generationRequestMetaUuid: "{{ generationRequestMetaUuid }}"
              status: ACTION_FAILED
            key: "{{ actionUuid }}"
    when: generateRenders == true
  - name: Upload render 5
    module: CloudStorage
    props:
      bucket: "{{ bucket }}"
      src: /home/workspace/render_5.{{ imageFormat }}
      options:
        public: false
        autoCreate: true
      action: upload
      dest: render-5-{{ generationRequestUuid }}.{{ imageFormat }}
    callbacks:
      onSuccess:
        - module: Kafka
          props:
            topic: "{{ rendersUpdateTopic }}"
            typeId: "{{ rendersUpdateTypeId }}"
            message:
              actionUuid: "{{ actionUuid }}"
              generationRequestUuid: "{{ generationRequestUuid }}"
              actionType: GENERATE_RENDERS
              meta:
                versionedProductUuid: "{{ versionedProductUuid }}"
                originProductUuid: "{{ originProductUuid }}"
                generationRequestMetaUuid: "{{ generationRequestMetaUuid }}"
              blobIds:
                - render-0-{{ generationRequestUuid }}.{{ imageFormat }}
                - render-1-{{ generationRequestUuid }}.{{ imageFormat }}
                - render-2-{{ generationRequestUuid }}.{{ imageFormat }}
                - render-3-{{ generationRequestUuid }}.{{ imageFormat }}
                - render-4-{{ generationRequestUuid }}.{{ imageFormat }}
                - render-5-{{ generationRequestUuid }}.{{ imageFormat }}
              status: ACTION_COMPLETED
            key: "{{ actionUuid }}"
      onError:
        - module: Kafka
          props:
            topic: "{{ rendersUpdateTopic }}"
            typeId: "{{ rendersUpdateTypeId }}"
            message:
              actionUuid: "{{ actionUuid }}"
              generationRequestUuid: "{{ generationRequestUuid }}"
              actionType: GENERATE_RENDERS
              meta:
                versionedProductUuid: "{{ versionedProductUuid }}"
                originProductUuid: "{{ originProductUuid }}"
                generationRequestMetaUuid: "{{ generationRequestMetaUuid }}"
              status: ACTION_FAILED
            key: "{{ actionUuid }}"
    when: generateRenders == true
  - name: Generate turntable renders
    module: ScreenshotGenerator
    props:
      args:
        - --verbose
        - --width
        - "{{ turntable.width }}"
        - --height
        - "{{ turntable.height }}"
        - --camera-angles turntable:{{ turntable.frames }}
        - --viewer-config
        - "{{ viewerConfig }}"
        - --background
        - "{{ turntableBackground }}"
      src: "{{ download.dest }}"
      dest: /home/workspace/output.jpg
      timeout: 600000
    callbacks:
      onStart:
        - module: Kafka
          props:
            topic: "{{ turntableUpdateTopic }}"
            typeId: "{{ turntableUpdateTypeId }}"
            message:
              actionUuid: "{{ actionUuid }}"
              generationRequestUuid: "{{ generationRequestUuid }}"
              actionType: GENERATE_TURNTABLE
              meta:
                versionedProductUuid: "{{ versionedProductUuid }}"
                originProductUuid: "{{ originProductUuid }}"
                generationRequestMetaUuid: "{{ generationRequestMetaUuid }}"
              status: ACTION_RUNNING
            key: "{{ actionUuid }}"
      onError:
        - module: Kafka
          props:
            topic: "{{ turntableUpdateTopic }}"
            typeId: "{{ turntableUpdateTypeId }}"
            message:
              actionUuid: "{{ actionUuid }}"
              generationRequestUuid: "{{ generationRequestUuid }}"
              actionType: GENERATE_TURNTABLE
              meta:
                versionedProductUuid: "{{ versionedProductUuid }}"
                originProductUuid: "{{ originProductUuid }}"
                generationRequestMetaUuid: "{{ generationRequestMetaUuid }}"
              status: ACTION_FAILED
            key: "{{ actionUuid }}"
    register: turntableFrames
    when: generateTurntable == true
  - name: Generate mp4 from renders
    module: FFmpeg
    props:
      src: /home/workspace/output_%d.jpg
      dest: /home/workspace/{{ generationRequestUuid }}.mp4
      config:
        srcConfig:
          framerate: "{{ turntable.framerate }}"
        destConfig:
          vf: scale='if(gt(iw,ih),2048,trunc(oh*a/2)*2)':'if(gt(iw,ih),trunc(ow/a/2)*2,2048)'
          pix_fmt: yuv420p
          c:v: libx264
    callbacks:
      onError:
        - module: Kafka
          props:
            topic: "{{ turntableUpdateTopic }}"
            typeId: "{{ turntableUpdateTypeId }}"
            message:
              actionUuid: "{{ actionUuid }}"
              generationRequestUuid: "{{ generationRequestUuid }}"
              actionType: GENERATE_TURNTABLE
              meta:
                versionedProductUuid: "{{ versionedProductUuid }}"
                originProductUuid: "{{ originProductUuid }}"
                generationRequestMetaUuid: "{{ generationRequestMetaUuid }}"
              status: ACTION_FAILED
            key: "{{ actionUuid }}"
    register: mp4Turntable
    when: generateTurntable == true
  - name: Generate gif from renders
    module: FFmpeg
    props:
      src: "{{ mp4Turntable.dest }}"
      dest: /home/workspace/{{ generationRequestUuid }}.gif
      config:
        destConfig:
          vf: fps={{ turntable.framerate
            }},scale='if(gt(iw,ih),512,trunc(oh*a/2)*2)':'if(gt(iw,ih),trunc(ow/a/2)*2,512)',split[s0][s1];[s0]palettegen[p];[s1][p]paletteuse
          loop: 0
    callbacks:
      onError:
        - module: Kafka
          props:
            topic: "{{ turntableUpdateTopic }}"
            typeId: "{{ turntableUpdateTypeId }}"
            message:
              actionUuid: "{{ actionUuid }}"
              generationRequestUuid: "{{ generationRequestUuid }}"
              actionType: GENERATE_TURNTABLE
              meta:
                versionedProductUuid: "{{ versionedProductUuid }}"
                originProductUuid: "{{ originProductUuid }}"
                generationRequestMetaUuid: "{{ generationRequestMetaUuid }}"
              status: ACTION_FAILED
            key: "{{ actionUuid }}"
    register: gifTurntable
    when: generateGif == true
  - name: Upload turntable MP4
    module: CloudStorage
    props:
      bucket: "{{ bucket }}"
      src: "{{ mp4Turntable.dest }}"
      options:
        public: false
        autoCreate: true
      action: upload
      dest: turntable-mp4-{{ generationRequestUuid }}.mp4
    callbacks:
      onSuccess:
        - module: Kafka
          props:
            topic: "{{ turntableUpdateTopic }}"
            typeId: "{{ turntableUpdateTypeId }}"
            message:
              actionUuid: "{{ actionUuid }}"
              generationRequestUuid: "{{ generationRequestUuid }}"
              actionType: GENERATE_TURNTABLE
              meta:
                versionedProductUuid: "{{ versionedProductUuid }}"
                originProductUuid: "{{ originProductUuid }}"
                generationRequestMetaUuid: "{{ generationRequestMetaUuid }}"
              blobIds:
                - turntable-mp4-{{ generationRequestUuid }}.mp4
              status: ACTION_COMPLETED
            key: "{{ actionUuid }}"
      onError:
        - module: Kafka
          props:
            topic: "{{ turntableUpdateTopic }}"
            typeId: "{{ turntableUpdateTypeId }}"
            message:
              actionUuid: "{{ actionUuid }}"
              generationRequestUuid: "{{ generationRequestUuid }}"
              actionType: GENERATE_TURNTABLE
              meta:
                versionedProductUuid: "{{ versionedProductUuid }}"
                originProductUuid: "{{ originProductUuid }}"
                generationRequestMetaUuid: "{{ generationRequestMetaUuid }}"
              status: ACTION_FAILED
            key: "{{ actionUuid }}"
    when: generateTurntable == true
  - name: Upload turntable GIF
    module: CloudStorage
    props:
      bucket: "{{ bucket }}"
      src: "{{ gifTurntable.dest }}"
      options:
        public: false
        autoCreate: true
      action: upload
      dest: turntable-gif-{{ generationRequestUuid }}.gif
    callbacks:
      onSuccess:
        - module: Kafka
          props:
            topic: "{{ turntableUpdateTopic }}"
            typeId: "{{ turntableUpdateTypeId }}"
            message:
              actionUuid: "{{ actionUuid }}"
              generationRequestUuid: "{{ generationRequestUuid }}"
              actionType: GENERATE_TURNTABLE
              meta:
                versionedProductUuid: "{{ versionedProductUuid }}"
                originProductUuid: "{{ originProductUuid }}"
                generationRequestMetaUuid: "{{ generationRequestMetaUuid }}"
              blobIds:
                - turntable-mp4-{{ generationRequestUuid }}.mp4
                - turntable-gif-{{ generationRequestUuid }}.gif
              status: ACTION_COMPLETED
            key: "{{ actionUuid }}"
      onError:
        - module: Kafka
          props:
            topic: "{{ turntableUpdateTopic }}"
            typeId: "{{ turntableUpdateTypeId }}"
            message:
              actionUuid: "{{ actionUuid }}"
              generationRequestUuid: "{{ generationRequestUuid }}"
              actionType: GENERATE_TURNTABLE
              meta:
                versionedProductUuid: "{{ versionedProductUuid }}"
                originProductUuid: "{{ originProductUuid }}"
                generationRequestMetaUuid: "{{ generationRequestMetaUuid }}"
              status: ACTION_FAILED
            key: "{{ actionUuid }}"
    when: generateGif == true
callbacks:
  onStart: []
  onLog: []
  onDebug: []
  onError:
    - module: StdOut
      props:
        format: raw
  onSuccess: []
  onFailure: []
  onEnd: []
plugins: []
